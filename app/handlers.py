from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv

import app.generator as generator
import database.requests as requests
import app.keyboards as keyboards

import re
import os
import tiktoken
import string
import secrets


load_dotenv()

bot = Bot(token=os.getenv('BOT_TOKEN'))
router = Router()

bot_link = 'https://t.me/Test_2110_bot'


class Answering(StatesGroup):
    answering = State()
    
    
class GiveStatus(StatesGroup):
    tg_id = State()
    
    
class CreatePromoCode(StatesGroup):
    number_of_uses = State()
    name = State()
    

@router.message(CommandStart())
async def start(message: Message):
    start_parameter = message.text.partition(' ')[2]
    
    await requests.set_user(tg_id=message.from_user.id,
                            username=f'@{message.from_user.username}')
    
    if not start_parameter:
        await info_menu(message=message)
    else:
        link = f'{bot_link}?start={start_parameter}'
        promo_code = await requests.get_promo_code(link=link)
        if promo_code:
            if promo_code.usage_count < promo_code.number_of_uses:
                await requests.set_status(tg_id=message.from_user.id, status_id=promo_code.status_id)
                await requests.plus_usage_to_promo_code(link=link)
                
                status = await requests.get_status(status_id=promo_code.status_id)
                
                text = (
                    f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É {status.name} –Ω–∞ x –¥–Ω–µ–π.\n\n<b>‚ú®–í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>'
                    f'\n\n{status.max_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ ChatGPT-4o mini –≤ –¥–µ–Ω—å'
                )
                await message.answer(text=text, parse_mode='HTML')  # –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å
            else:
                await message.answer(text='–£ —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.')
        else:
            await info_menu(message=message)
        
    
@router.message(Command('info'))
async def command_info(message: Message):
    await info_menu(message=message)
    
    
async def info_menu(message: Message):
    user_status_id = (await requests.get_user(tg_id=message.from_user.id)).status_id
    user_status = await requests.get_status(status_id=user_status_id)
    
    await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç, —è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI –±–æ—Ç.\nAI, –∫–æ—Ç–æ—Ä—ã–µ —è –∏—Å–ø–æ–ª—å–∑—É—é: ' \
                              f'ChatGPT-4o mini (–£ –≤–∞—Å –µ—Å—Ç—å –∫ –Ω–µ–º—É ' \
                              f'{user_status.max_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å).'
                              f'\n\nüìä <b>–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤? '
                              f'–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Premium-–ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 199 —Ä—É–±./–º–µ—Å.</b>',
                         reply_markup=await keyboards.start_keyboard(tg_id=message.from_user.id),
                         parse_mode='HTML')
    
    
@router.callback_query(F.data == 'subscription_info')
async def pay_requests_menu_callback(callback: CallbackQuery):
    await pay_requests_menu(callback=callback)
    

# –¢—É—Ç "premium" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ "subscription".
@router.message(Command('premium'))
async def pay_requests_menu_command(message: Message):
    await pay_requests_menu(message=message)
    
    
async def pay_requests_menu(callback: CallbackQuery | None = None, message: Message | None = None):
    if callback:
        await callback.answer()
    
    default_status = await requests.get_default_status()
    text = ( 
        f'–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ {default_status.max_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –∫ '
        f'ChatGPT-4o mini.\n\n<b>üìà –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤? –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Premium-–ø–æ–¥–ø–∏—Å–∫—É –∑–∞ '
        f'199 —Ä—É–±./–º–µ—Å.</b>\n\n<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium-–ø–æ–¥–ø–∏—Å–∫–∏:</b>\n'
        f'‚óª100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ ChatGPT-4o mini –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n\n<b>–ù—É–∂–Ω–æ –µ—â—ë –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ '
        f'ChatGPT-4o mini?</b>\n'
        f'‚óª150 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –∑–∞ 299 —Ä—É–±./–º–µ—Å.\n‚óª200 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –∑–∞ 399 —Ä—É–±./–º–µ—Å.\n\n'
        f'<b>–ó–∞ –ø–æ–∫—É–ø–∫–æ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞ üëâ @zmxuce</b>'
    )
    if callback:
        await callback.message.answer(text=text, parse_mode='HTML')
    elif message:
        await message.answer(text=text, parse_mode='HTML')


@router.callback_query(F.data == 'admin_menu')
async def admin_menu(callback: CallbackQuery):
    await callback.answer()
    
    await callback.message.answer(text='–ê–¥–º–∏–Ω-–º–µ–Ω—é.',
                                  reply_markup=await keyboards.admin_menu_keyboard())
    
    
@router.callback_query(F.data == 'give_status')
async def give_status_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, ' \
                                       '–∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å.')
    await state.set_state(GiveStatus.tg_id)


@router.message(GiveStatus.tg_id)
async def give_status_tg_id(message: Message, state: FSMContext):
    user = await requests.get_user(tg_id=message.text)
    if user:
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.',
                            reply_markup=await keyboards.give_status_all_statuses_keyboard())
        await state.update_data(tg_id=message.text)
    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
        await state.clear()
    
    
@router.callback_query(F.data.startswith('give_status_status_'))
async def give_status_status(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    status_id = callback.data.split('_')[1]
    data = await state.get_data()
    
    await requests.set_status(tg_id=data.get("tg_id"), status_id=status_id)
    
    status = await requests.get_status(status_id=status_id)
    await callback.message.answer(f'–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω.\nTG_ID: {data.get("tg_id")}\n' \
                                  f'–°—Ç–∞—Ç—É—Å: {status.name}')
    
    await state.clear()
    
    
@router.callback_query(F.data == 'create_promo_code')
async def create_promo_code_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:')
    await state.set_state(CreatePromoCode.number_of_uses)
    
    
@router.message(CreatePromoCode.number_of_uses)
async def create_promo_code_number_of_uses(message: Message, state: FSMContext):
    if message.text.isdigit():
        await message.answer(text=('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ '
                                   '–ø—Ä–æ–º–æ–∫–æ–¥–∞.'),
                             reply_markup= \
                                 await keyboards.create_promo_code_all_statuses_keyboard())
        await state.update_data(number_of_uses=message.text)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
        await state.set_state(CreatePromoCode.number_of_uses)
        
        
@router.callback_query(F.data.startswith('create_promo_code_status_'))
async def create_promo_code_status(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    await state.update_data(status_id=callback.data.split('_')[4])
    
    text = (
        f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–µ.\n–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –≤–≤–µ–¥—ë—Ç–µ '
        f'"example", —Ç–æ —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: "{bot_link}?start=example"'
    )
    await callback.message.answer(text=text,
                                  reply_markup= (await \
                                      keyboards.create_promo_code_random_generate_keyboard()))
    
    await state.set_state(CreatePromoCode.name)
    
    
@router.message(CreatePromoCode.name)
async def create_promo_code_name(message: Message, state: FSMContext):
    data = await state.get_data()
    
    status = await requests.get_status(status_id=data.get("status_id"))
    
    link = f'{bot_link}?start={message.text}'
    
    await requests.create_promo_code(link=link, number_of_uses=data.get("number_of_uses"), 
                                     status_id=data.get("status_id"))
    
    text = (
        f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ {link}.\n\n'
        f'–ï–≥–æ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {data.get("number_of_uses")} —Ä–∞–∑ –∏ –æ–Ω –¥–∞—ë—Ç —Å—Ç–∞—Ç—É—Å {status.name}.'
    )
    await message.answer(text=text)
    
    await state.clear()
    
    
@router.callback_query(F.data == 'create_promo_code_random_generate')
async def create_promo_code_random_generate(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    data = await state.get_data()
    
    status = await requests.get_status(status_id=data.get("status_id"))
    
    alphabet = string.ascii_letters + string.digits
    name = ''
    for _ in range(12):
        name += secrets.choice(alphabet)
    
    link = f'{bot_link}?start={name}'
    
    await requests.create_promo_code(link=link, number_of_uses=data.get("number_of_uses"), 
                                     status_id=data.get("status_id"))
        
    text = (
        f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ {bot_link}?start={name}.\n\n'
        f'–ï–≥–æ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {data.get("number_of_uses")} —Ä–∞–∑ –∏ –æ–Ω –¥–∞—ë—Ç —Å—Ç–∞—Ç—É—Å {status.name}.'
    )
    await callback.message.answer(text=text)
    
    await state.clear()
        
    
@router.message()
async def any_message(message: Message, state: FSMContext):
    user = await requests.get_user(tg_id=message.from_user.id)

    user_status = await requests.get_status(status_id=user.status_id)
    if (await state.get_state() != Answering.answering \
        and user.requests_today < user_status.max_requests):
        message_from_bot = await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à ' \
                                                '–∑–∞–ø—Ä–æ—Å...')
        
        encoding = tiktoken.encoding_for_model("gpt-4o-mini")
        await state.set_state(Answering.answering)

        response = await chatgpt_request(message=message)
        try:
            await bot.edit_message_text(text=response, chat_id=message.chat.id,
                                        message_id=message_from_bot.message_id,
                                        parse_mode='Markdown')
        except TelegramBadRequest as exception:
            if str(exception) == 'Telegram server says - Bad Request: MESSAGE_TOO_LONG':
                try:
                    await bot.edit_message_text(text='–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ' \
                                                     '(–±–æ–ª–µ–µ, —á–µ–º 4096 —Å–∏–º–≤–æ–ª–æ–≤).',
                                                chat_id=message.chat.id,
                                                message_id=message_from_bot.message_id)
                except TelegramBadRequest:
                    await message.answer(text='–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ' \
                                              ' (–±–æ–ª–µ–µ, —á–µ–º 4096 —Å–∏–º–≤–æ–ª–æ–≤).')
            else:
                await message.answer(text=response, parse_mode='Markdown')

        await requests.plus_request_to_user(tg_id=message.from_user.id)

        await state.clear()
    elif user.requests_today >= user_status.max_requests:
        user = await requests.get_user(message.from_user.id)
        user_date_for_clear_requests = user.time_for_clear_requests
        
        date_for_clear_requests = user_date_for_clear_requests.split(' ')[0]
        month_for_clear_requests = date_for_clear_requests.split('-')[1]
        day_for_clear_requests = date_for_clear_requests.split('-')[2]
        time_for_clear_requests = user_date_for_clear_requests.split(' ')[1]
        hours_for_clear_requests = time_for_clear_requests.split(':')[0]
        minutes_for_clear_requests = time_for_clear_requests.split(':')[1]
        
        await message.answer(f'–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∫–æ–Ω—á–∏–ª–∏—Å—å. –û–Ω–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è ' \
                             f'{day_for_clear_requests}.{month_for_clear_requests} –≤ ' \
                             f'{hours_for_clear_requests}:{minutes_for_clear_requests} –ø–æ ' \
                             f'–ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.',
                             reply_markup=await keyboards.pay_requests_keyboard())


async def chatgpt_request(message: Message):
    await requests.set_context(tg_id=message.from_user.id, role='user', content=message.text)

    response = await generator.chatgpt_request(request=message.text, tg_id=message.from_user.id)
    await requests.set_context(tg_id=message.from_user.id, role='assistant', content=response)

    response = re.sub(pattern=r'### (.+)', repl=r'*\1*', string=response)
    
    user_contexts = await requests.get_user_not_system_contexts(tg_id=message.from_user.id)

    user_status_id = (await requests.get_user(tg_id=message.from_user.id)).status_id

    user_status = await requests.get_status(status_id=user_status_id)

    if len(user_contexts) > user_status.max_context:
        contexts_to_delete_count = (len(user_contexts) - user_status.max_context)
        contexts_to_delete = []
        for index, context_to_delete in enumerate(user_contexts):
            if index >= contexts_to_delete_count:
                break
            contexts_to_delete.append(context_to_delete)
        await requests.remove_contexts(contexts=contexts_to_delete)
    return response
